// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskNinja.Services;

#nullable disable

namespace TaskNinja.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240123212757_AddedIdentity")]
    partial class AddedIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskNinja.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TodoTaskID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TodoTaskID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "First comment on Task 1",
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(6111),
                            TodoTaskID = 24
                        },
                        new
                        {
                            ID = 2,
                            Content = "Another comment on Task 1",
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(6116),
                            TodoTaskID = 24
                        },
                        new
                        {
                            ID = 3,
                            Content = "Comment on Task 2",
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(6118),
                            TodoTaskID = 25
                        });
                });

            modelBuilder.Entity("TaskNinja.Models.TodoTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5890),
                            Description = "Description for Task 1",
                            DueDate = new DateTime(2024, 1, 16, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5930),
                            Name = "Task 1",
                            Priority = "High",
                            Status = "InProgress"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5939),
                            Description = "Description for Task 2",
                            DueDate = new DateTime(2024, 2, 6, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5940),
                            Name = "Task 2",
                            Priority = "Medium",
                            Status = "NotStarted"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5943),
                            Description = "Description for Task 3",
                            DueDate = new DateTime(2024, 2, 13, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5944),
                            Name = "Task 3",
                            Priority = "Low",
                            Status = "Completed"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5947),
                            Description = "Description for Task 4",
                            DueDate = new DateTime(2023, 12, 24, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5948),
                            Name = "Task 4",
                            Priority = "High",
                            Status = "InProgress"
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5950),
                            Description = "Description for Task 5",
                            DueDate = new DateTime(2024, 2, 2, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5951),
                            Name = "Task 5",
                            Priority = "Medium",
                            Status = "Completed"
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5955),
                            Description = "Description for Task 6",
                            DueDate = new DateTime(2024, 1, 21, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5956),
                            Name = "Task 6",
                            Priority = "Low",
                            Status = "NotStarted"
                        },
                        new
                        {
                            ID = 7,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5959),
                            Description = "Description for Task 7",
                            DueDate = new DateTime(2024, 2, 13, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5960),
                            Name = "Task 7",
                            Priority = "Medium",
                            Status = "InProgress"
                        },
                        new
                        {
                            ID = 8,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5962),
                            Description = "Description for Task 8",
                            DueDate = new DateTime(2024, 2, 22, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5964),
                            Name = "Task 8",
                            Priority = "Low",
                            Status = "NotStarted"
                        },
                        new
                        {
                            ID = 9,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5966),
                            Description = "Description for Task 9",
                            DueDate = new DateTime(2024, 1, 30, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5967),
                            Name = "Task 9",
                            Priority = "High",
                            Status = "Completed"
                        },
                        new
                        {
                            ID = 10,
                            CreatedDate = new DateTime(2024, 1, 23, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5970),
                            Description = "Description for Task 10",
                            DueDate = new DateTime(2024, 2, 6, 22, 27, 56, 185, DateTimeKind.Local).AddTicks(5972),
                            Name = "Task 10",
                            Priority = "Medium",
                            Status = "InProgress"
                        });
                });

            modelBuilder.Entity("TaskNinja.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskNinja.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskNinja.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskNinja.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskNinja.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskNinja.Models.Comment", b =>
                {
                    b.HasOne("TaskNinja.Models.TodoTask", "TodoTask")
                        .WithMany("Comments")
                        .HasForeignKey("TodoTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoTask");
                });

            modelBuilder.Entity("TaskNinja.Models.TodoTask", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
